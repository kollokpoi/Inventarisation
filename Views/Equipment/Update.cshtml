@{
    Layout = "_Layout";
}
@using Inventarisation.ViewModels;
@addTagHelper "*, Microsoft.AspNet.Mvc.TagHelpers"
@model EquipmentUpdateViewModel

@{
    if (ViewBag.ErrorMessage != null)
    {
        <p class="login-form_error-message">@ViewBag.ErrorMessage</p>
    }
}
<div class="equipment-item_parrent">
    @{
        @if (Model.Equipment.Image != null)
        {
            <img class="equipment-item_image" src="data:image/jpg;base64,@Convert.ToBase64String(Model.Equipment.Image)" />
        }
        else
        {
            <img class="equipment-item_image" src="/Img/fotoapparat.jpg" />
        }
    }
    <div class="equipment-item_info-block">
        <p class="equipment-item_text">Название: <span class="equipment-item_span">@Model.Equipment.Name</span> </p>
        <p class="equipment-item_text">Аудитория: <span class="equipment-item_span">@Model.Equipment.Auditory.ShortName</span></p>
        <p class="equipment-item_text">Цена: <span class="equipment-item_span">@Model.Equipment.Price</span></p>
        <p class="equipment-item_text">Комментарий: <span class="equipment-item_span">@Model.Equipment.Comment</span></p>
    </div>
</div>
<form method="post" enctype="multipart/form-data">
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Аудитория:
        </p>
        <select name="Auditory">
            @{
                foreach (var item in Model.Auditoryes)
                {
                    if (item.Id == Model.Equipment.AuditoryId)
                    {
                        <option selected value="@item.Id">@item.Name</option>
                        continue;
                    }
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </select>
    </div>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Статус:
        </p>
        <select name="Status">
            @{
                foreach (var item in Model.Statuses)
                {
                    if (item.Id == Model.Equipment.StatusId)
                    {
                        <option selected value="@item.Id">@item.Name</option>
                        continue;
                    }
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </select>
    </div>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Ответственный:
        </p>
        <select name="ResponsibleUserId" id="ResponsibleUserId">
            @{
                foreach (var item in Model.Users)
                {
                    if (item.Id == Model.Equipment.ResponsibleUserId)
                    {
                        <option selected value="@item.Id">@item.GetFullName()</option>
                        continue;
                    }
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </select>
        <input name="Comment" style="display:none" id="Comment"/>
    </div>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Временно - ответственный:
        </p>
        <select name="TempResponsibleUserId">
            @{
                foreach (var item in Model.Users)
                {
                    if (item.Id == Model.Equipment.TempResponsibleUserId)
                    {
                        <option selected value="@item.Id">@item.GetFullName()</option>
                        continue;
                    }
                    <option value="@item.Id">@item.Name</option>
                }
                <option value="0">Отсутствует</option>
            }
        </select>
    </div>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Модель:
        </p>
        <div class="equipment-info_row">
            <p class="equipment-info_text">
                Тип:
                <span class="equipment-info_span">
                    @Model.Equipment.EquipmentModel.EquipmentType.Name
                </span>
            </p>
            <p class="equipment-info_text">
                Название:
                <span class="equipment-info_span">
                    @Model.Equipment.EquipmentModel.Name
                </span>
            </p>
        </div>
    </div>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Статус:
            <span class="equipment-info_span">
                @Model.Equipment.Status.Name
            </span>
        </p>
    </div>
    <p class="equipment-info_title">
        Количество:
        <input type="number" name="Count" class="equipment-info_span" value="@Model.Equipment.Count">
            
    </p>
    <div class="equipment-info_item">
        <p class="equipment-info_title">
            Направление:
            <span class="equipment-info_span">
                @Model.Equipment.Direction.Name
            </span>
        </p>
    </div>
    <input type="submit"/>
</form>
<div class="equipment-info_item" id="settings-holder">
    <p class="equipment-info_title">
        Настройки:
    </p>
    @{
        foreach (var item in Model.Equipment.EquipmentSettings)
        {
            <div class="equipment-info_row">
                <p class="equipment-info_text">
                    IP:
                    <span class="equipment-info_span">
                        @item.IPAddr
                    </span>
                </p>
                <p class="equipment-info_text">
                    Маска:
                    <span class="equipment-info_span">
                        @item.Mask
                    </span>
                </p>
                <p class="equipment-info_text">
                    Порт:
                    <span class="equipment-info_span">
                        @item.Getaway
                    </span>
                </p>
                <p class="equipment-info_text">
                    ДНС:
                    <span class="equipment-info_span">
                        @item.DNS
                    </span>
                </p>
            </div>
        }
    }
</div>
<form action="AddSettings" id="addSettingsForm" method="post">
    <input name="ipAddr" placeholder="ip"/>
    <input name="mask" placeholder="Маска"/>
    <input name="getaway" placeholder="Порт"/>
    <input name="dns" placeholder="ДНС"/>
    <input name="secondDns" placeholder="ДНС" />
    <input type="submit" value="Добавить" />
</form>
<div class="equipment-info_item" id="programsHolder">
    <p class="equipment-info_title">
        Программы на устройстве:
    </p>
    @{
        foreach (var item in Model.Equipment.Programms)
        {
            <div class="equipment-info_row">
                <p class="equipment-info_text">
                    Название:
                    <span class="equipment-info_span">
                        @item.Name
                    </span>
                </p>
                <p class="equipment-info_text">
                    Версия:
                    <span class="equipment-info_span">
                        @item.Version
                    </span>
                </p>
                <p class="equipment-info_text">
                    Разраб:
                    <span class="equipment-info_span">
                        @item.ProgramCreator.Name
                    </span>
                </p>
            </div>
        }
    }
</div>
<form action="AddProgram" id="addProgramForm" method="post">
        <select name="Program" id="ProgramId">
            @{
                foreach (var item in Model.Programs)
                {
                    bool contains = false;
                    foreach (var eqProg  in Model.Equipment.Programms)
                    {
                        if (item.Id == eqProg.Id)
                        {
                            contains=true;
                            break;
                        }
                    }
                    if (!contains)
                    {
                        <option value="@item.Id">@item.Name</option>
                    } 
                }
            }
        </select>
        <input type="submit" value="Добавить"/>
    </form>

<div class="equipment-info_item" id="programsHolder">
    <p class="equipment-info_title">
        Программы на устройстве:
    </p>
    @{
        foreach (var item in Model.Equipment.Programms)
        {
            <div class="equipment-info_row">
                <p class="equipment-info_text">
                    Название:
                    <span class="equipment-info_span">
                        @item.Name
                    </span>
                </p>
                <p class="equipment-info_text">
                    Версия:
                    <span class="equipment-info_span">
                        @item.Version
                    </span>
                </p>
                <p class="equipment-info_text">
                    Разраб:
                    <span class="equipment-info_span">
                        @item.ProgramCreator.Name
                    </span>
                </p>
            </div>
        }
    }
</div>

<div class="equipment-info_item">
    <p class="equipment-info_title">
        Расходники:
    </p>
</div>
@{
    foreach (var item in Model.Equipment.Consumables)
    {
        <div class="equipment-item_parrent">
            <img class="equipment-item_image" src="data:image/jpg;base64,@item.Image" />
            <div class="equipment-item_info-block">
                <p class="equipment-item_text">Название:<span class="equipment-item_span">@item.Name</span> </p>
                <p class="equipment-item_text">Описание:<span class="equipment-item_span">@item.Description</span></p>
                <p class="equipment-item_text">Дата получения: <span class="equipment-item_span">@item.DateOfCame.Date</span></p>
                <p class="equipment-item_text">Количество: <span class="equipment-item_span">@item.Count</span></p>
                <p class="equipment-item_text">Ответственный пользователь: <span class="equipment-item_span">@item.ResponsibleUser.GetFullName()</span></p>
                @if (item.TempResponsibleUser != null)
                {
                    <p class="equipment-item_text">Временно ответственный: <span class="equipment-item_span">@item.TempResponsibleUser.GetFullName()</span></p>
                }
                else
                {
                    <p class="equipment-item_text">Временно ответственный: <span class="equipment-item_span">Отсутствует</span></p>
                }
                <p class="equipment-item_text">Тип: <span class="equipment-item_span">@item.ConsumablesType.Name</span></p>
            </div>
        </div>
        <p class="equipment-info_title">Характеристики:</p>
        foreach (var spec in item.Specifications)
        {
            <p class="equipment-item_text">@spec.Name:<span class="equipment-item_span">@spec.Value</span> </p>
        }
    }
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Обработка отправки формы
        $("#addSettingsForm").submit(function (e) {
            e.preventDefault(); // Предотвращаем стандартное действие формы (перезагрузку страницы)

            // Получаем значения полей из формы
            var ipAddress = $("input[name='ipAddr']").val();
            var mask = $("input[name='mask']").val();
            var getaway = $("input[name='getaway']").val();
            var dns = $("input[name='dns']").val();
            var secondDns = $("input[name='secondDns']").val();

            // Проверка данных с использованием регулярных выражений
            if (!isValidIpAddress(ipAddress) || !isValidIpAddress(mask) || !isValidIpAddress(getaway) || !isValidIpAddress(dns) || !isValidIpAddress(secondDns)) {
                alert("Некорректные данные. Пожалуйста, проверьте введенные значения.");
                return;
            }

            // Если все данные корректны, отправляем форму на сервер
            $.ajax({
                type: "POST",
                url: "AddSettings?Id=@Model.Equipment.InventNumber",
                data: $(this).serialize(),
                success: function (response) {
                    // Обработка успешного ответа от сервера (по вашему выбору)
                    alert("Настройки добавлены успешно!");
                    var addHtml = '<div class="equipment-info_row"><p class="equipment-info_text">IP:<span class="equipment-info_span">'+ipAddress+'</span></p><p class="equipment-info_text">Маска:<span class="equipment-info_span">'+mask+'</span></p><p class="equipment-info_text">Порт:<span class="equipment-info_span">'+getaway+'</span></p><p class="equipment-info_text"> ДНС:<span class="equipment-info_span">'+dns+'</span></p></div>';
                    $("#settings-holder").append(addHtml);
                },
                error: function (error) {
                    // Обработка ошибки (по вашему выбору)
                    alert("Произошла ошибка при добавлении настроек.");
                }
            });
        });

        // Функция для проверки IP-адреса с использованием регулярного выражения
        function isValidIpAddress(ipAddress) {
            var ipPattern = /^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$/;
            return ipPattern.test(ipAddress);
        }
    });
</script>
<script>
    $(document).ready(function () {
        $("#addProgramForm").submit(function (e) {
            e.preventDefault();
            var selectedProgramName = $("#ProgramId option:selected").text();
            var selectedProgramId = $("#ProgramId").val();

            // Отправляем выбранное значение на сервер с использованием AJAX
            $.ajax({
                type: "POST", // Метод HTTP-запроса (POST)
                url: "AddProgram?Id=@Model.Equipment.InventNumber", // URL для отправки данных на сервер
                data: { programId: selectedProgramId }, // Данные для отправки
                success: function (response) {
                    var equipmentInfoTitle = $('<div class="equipment-info_row"><p class="equipment-info_text">Название: <span class="equipment-info_span">' + selectedProgramName + '</span></p></div>');
                    $("#programsHolder").append(equipmentInfoTitle);
                    $("#ProgramId option:selected").remove();
                },
                error: function (error) {
                    // Обработка ошибки (по вашему выбору)
                    alert("Произошла ошибка при добавлении программы.");
                }
            });
        });
    });
</script>
<script>
    $(document).ready(function () {
        // Идентификатор элемента, который должен быть выбран, чтобы скрыть input
        var targetId = @Model.Equipment.ResponsibleUserId;

        // Обработка изменений в элементе select
        $("#ResponsibleUserId").change(function () {
            var selectedValue = $(this).val();

            // Проверяем, выбрана ли опция с нужным идентификатором
            if (selectedValue === targetId.toString()) {
                // Скрываем элемент input с id Comment
                $("#Comment").hide();
            } else {
                // Показываем элемент input с id Comment
                $("#Comment").show();
            }
        });
    });
</script>